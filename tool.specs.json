{
  "tools": [
    {
      "description": "A wrapper around [AI-Minds](https://mindsdb.com/minds). Useful for when you need answers to questions from your data, stored in data sources including PostgreSQL, MySQL, MariaDB, ClickHouse, Snowflake and Google BigQuery. Input should be a question in natural language.",
      "env_vars": [],
      "name": "AIMindTool",
      "run_params": [
        {
          "description": "Question in natural language to ask the AI-Mind",
          "name": "query",
          "type": "str"
        }
      ],
      "verbose_name": "AIMind Tool"
    },
    {
      "description": "A tool that can be used to search the internet with a search_query.",
      "env_vars": [],
      "name": "BraveSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the internet",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Brave Web Search the internet"
    },
    {
      "description": "Load webpages url in a headless browser using Browserbase and return the contents",
      "env_vars": [],
      "name": "BrowserbaseLoadTool",
      "run_params": [
        {
          "description": "Website URL",
          "name": "url",
          "type": "str"
        }
      ],
      "verbose_name": "Browserbase web load tool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a CSV's content.",
      "env_vars": [],
      "name": "CSVSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the CSV's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory csv path you want to search",
          "name": "csv",
          "type": "str"
        }
      ],
      "verbose_name": "Search a CSV's content"
    },
    {
      "description": "A tool that can be used to semantic search a query from a Code Docs content.",
      "env_vars": [],
      "name": "CodeDocsSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the Code Docs content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory docs_url path you want to search",
          "name": "docs_url",
          "type": "str"
        }
      ],
      "verbose_name": "Search a Code Docs content"
    },
    {
      "description": "Interprets Python3 code strings with a final print statement.",
      "env_vars": [],
      "name": "CodeInterpreterTool",
      "run_params": [
        {
          "description": "Python3 code used to be interpreted in the Docker container. ALWAYS PRINT the final result and the output of the code",
          "name": "code",
          "type": "str"
        },
        {
          "description": "List of libraries used in the code with proper installing names separated by commas. Example: numpy,pandas,beautifulsoup4",
          "name": "libraries_used",
          "type": "list[str]"
        }
      ],
      "verbose_name": "Code Interpreter"
    },
    {
      "description": "",
      "env_vars": [],
      "name": "ComposioTool",
      "run_params": [],
      "verbose_name": "ComposioTool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a DOCX's content.",
      "env_vars": [],
      "name": "DOCXSearchTool",
      "run_params": [
        {
          "description": "Mandatory docx path you want to search",
          "name": "docx",
          "type": "str"
        },
        {
          "description": "Mandatory search query you want to use to search the DOCX's content",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Search a DOCX's content"
    },
    {
      "description": "Generates images using OpenAI's Dall-E model.",
      "env_vars": [],
      "name": "DallETool",
      "run_params": [
        {
          "description": "Description of the image to be generated by Dall-E.",
          "name": "image_description",
          "type": "str"
        }
      ],
      "verbose_name": "Dall-E Tool"
    },
    {
      "description": "Execute SQL queries against Databricks workspace tables and return the results. Provide a 'query' parameter with the SQL query to execute.",
      "env_vars": [],
      "name": "DatabricksQueryTool",
      "run_params": [
        {
          "description": "SQL query to execute against the Databricks workspace table",
          "name": "query",
          "type": "str"
        },
        {
          "description": "Databricks catalog name (optional, defaults to configured catalog)",
          "name": "catalog",
          "type": "str"
        },
        {
          "description": "Databricks schema name (optional, defaults to configured schema)",
          "name": "db_schema",
          "type": "str"
        },
        {
          "description": "Databricks SQL warehouse ID (optional, defaults to configured warehouse)",
          "name": "warehouse_id",
          "type": "str"
        },
        {
          "description": "Maximum number of rows to return (default: 1000)",
          "name": "row_limit",
          "type": "int"
        }
      ],
      "verbose_name": "Databricks SQL Query"
    },
    {
      "description": "A tool that can be used to recursively list a directory's content.",
      "env_vars": [],
      "name": "DirectoryReadTool",
      "run_params": [
        {
          "description": "Mandatory directory to list content",
          "name": "directory",
          "type": "str"
        }
      ],
      "verbose_name": "List files in directory"
    },
    {
      "description": "A tool that can be used to semantic search a query from a directory's content.",
      "env_vars": [],
      "name": "DirectorySearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the directory's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory directory you want to search",
          "name": "directory",
          "type": "str"
        }
      ],
      "verbose_name": "Search a directory's content"
    },
    {
      "description": "Search the internet using Exa",
      "env_vars": [],
      "name": "EXASearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the internet",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Start date for the search",
          "name": "start_published_date",
          "type": "str"
        },
        {
          "description": "End date for the search",
          "name": "end_published_date",
          "type": "str"
        },
        {
          "description": "List of domains to include in the search",
          "name": "include_domains",
          "type": "list[str]"
        }
      ],
      "verbose_name": "EXASearchTool"
    },
    {
      "description": "Compresses a file or directory into an archive (.zip currently supported). Useful for archiving logs, documents, or backups.",
      "env_vars": [],
      "name": "FileCompressorTool",
      "run_params": [
        {
          "description": "Path to the file or directory to compress.",
          "name": "input_path",
          "type": "str"
        },
        {
          "description": "Optional output archive filename.",
          "name": "output_path",
          "type": "str"
        },
        {
          "description": "Whether to overwrite the archive if it already exists.",
          "name": "overwrite",
          "type": "bool"
        },
        {
          "description": "zip",
          "name": "format",
          "type": "str"
        }
      ],
      "verbose_name": "File Compressor Tool"
    },
    {
      "description": "A tool that reads the content of a file. To use this tool, provide a 'file_path' parameter with the path to the file you want to read. Optionally, provide 'start_line' to start reading from a specific line and 'line_count' to limit the number of lines read.",
      "env_vars": [],
      "name": "FileReadTool",
      "run_params": [
        {
          "description": "Mandatory file full path to read the file",
          "name": "file_path",
          "type": "str"
        },
        {
          "description": "Line number to start reading from (1-indexed)",
          "name": "start_line",
          "type": "int"
        },
        {
          "description": "Number of lines to read. If None, reads the entire file",
          "name": "line_count",
          "type": "int"
        }
      ],
      "verbose_name": "Read a file's content"
    },
    {
      "description": "A tool to write content to a specified file. Accepts filename, content, and optionally a directory path and overwrite flag as input.",
      "env_vars": [],
      "name": "FileWriterTool",
      "run_params": [
        {
          "description": "",
          "name": "filename",
          "type": "str"
        },
        {
          "description": "./",
          "name": "directory",
          "type": "str"
        },
        {
          "description": "",
          "name": "overwrite",
          "type": "union[str, bool]"
        },
        {
          "description": "",
          "name": "content",
          "type": "str"
        }
      ],
      "verbose_name": "File Writer Tool"
    },
    {
      "description": "Crawl webpages using Firecrawl and return the contents",
      "env_vars": [],
      "name": "FirecrawlCrawlWebsiteTool",
      "run_params": [
        {
          "description": "Website URL",
          "name": "url",
          "type": "str"
        }
      ],
      "verbose_name": "Firecrawl web crawl tool"
    },
    {
      "description": "Scrape webpages using Firecrawl and return the contents",
      "env_vars": [],
      "name": "FirecrawlScrapeWebsiteTool",
      "run_params": [
        {
          "description": "Website URL",
          "name": "url",
          "type": "str"
        }
      ],
      "verbose_name": "Firecrawl web scrape tool"
    },
    {
      "description": "Search webpages using Firecrawl and return the results",
      "env_vars": [],
      "name": "FirecrawlSearchTool",
      "run_params": [
        {
          "description": "Search query",
          "name": "query",
          "type": "str"
        }
      ],
      "verbose_name": "Firecrawl web search tool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a github repo's content. This is not the GitHub API, but instead a tool that can provide semantic search capabilities.",
      "env_vars": [],
      "name": "GithubSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the github repo's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory github you want to search",
          "name": "github_repo",
          "type": "str"
        },
        {
          "description": "Mandatory content types you want to be included search, options: [code, repo, pr, issue]",
          "name": "content_types",
          "type": "list[str]"
        }
      ],
      "verbose_name": "Search a github repo's content"
    },
    {
      "description": "Scrape or crawl a website using Hyperbrowser and return the contents in properly formatted markdown or html",
      "env_vars": [],
      "name": "HyperbrowserLoadTool",
      "run_params": [
        {
          "description": "Website URL",
          "name": "url",
          "type": "str"
        },
        {
          "description": "Operation to perform on the website. Either 'scrape' or 'crawl'",
          "name": "operation",
          "type": "literal"
        },
        {
          "description": "Optional params for scrape or crawl. For more information on the supported params, visit https://docs.hyperbrowser.ai/reference/sdks/python/scrape#start-scrape-job-and-wait or https://docs.hyperbrowser.ai/reference/sdks/python/crawl#start-crawl-job-and-wait",
          "name": "params",
          "type": "dict[any, any]"
        }
      ],
      "verbose_name": "Hyperbrowser web load tool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a JSON's content.",
      "env_vars": [],
      "name": "JSONSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the JSON's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory json path you want to search",
          "name": "json_path",
          "type": "str"
        }
      ],
      "verbose_name": "Search a JSON's content"
    },
    {
      "description": "Performs an API call to Linkup to retrieve contextual information.",
      "env_vars": [],
      "name": "LinkupSearchTool",
      "run_params": [],
      "verbose_name": "Linkup Search Tool"
    },
    {
      "description": "",
      "env_vars": [],
      "name": "LlamaIndexTool",
      "run_params": [],
      "verbose_name": "LlamaIndexTool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a MDX's content.",
      "env_vars": [],
      "name": "MDXSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the MDX's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory mdx path you want to search",
          "name": "mdx",
          "type": "str"
        }
      ],
      "verbose_name": "Search a MDX's content"
    },
    {
      "description": "Multion gives the ability for LLMs to control web browsers using natural language instructions.\n            If the status is 'CONTINUE', reissue the same instruction to continue execution",
      "env_vars": [],
      "name": "MultiOnTool",
      "run_params": [],
      "verbose_name": "Multion Browse Tool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a database table's content.",
      "env_vars": [],
      "name": "MySQLSearchTool",
      "run_params": [
        {
          "description": "Mandatory semantic search query you want to use to search the database's content",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Search a database's table content"
    },
    {
      "description": "Converts natural language to SQL queries and executes them.",
      "env_vars": [],
      "name": "NL2SQLTool",
      "run_params": [
        {
          "description": "The SQL query to execute.",
          "name": "sql_query",
          "type": "str"
        }
      ],
      "verbose_name": "NL2SQLTool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a PDF's content.",
      "env_vars": [],
      "name": "PDFSearchTool",
      "run_params": [
        {
          "description": "Mandatory query you want to use to search the PDF's content",
          "name": "query",
          "type": "str"
        },
        {
          "description": "Mandatory pdf path you want to search",
          "name": "pdf",
          "type": "str"
        }
      ],
      "verbose_name": "Search a PDF's content"
    },
    {
      "description": "A tool that can be used to semantic search a query from a database table's content.",
      "env_vars": [],
      "name": "PGSearchTool",
      "run_params": [
        {
          "description": "Mandatory semantic search query you want to use to search the database's content",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Search a database's table content"
    },
    {
      "description": "",
      "env_vars": [],
      "name": "PatronusEvalTool",
      "run_params": [],
      "verbose_name": "Patronus Evaluation Tool"
    },
    {
      "description": "This tool calls the Patronus Evaluation API that takes the following arguments:",
      "env_vars": [],
      "name": "PatronusPredefinedCriteriaEvalTool",
      "run_params": [
        {
          "description": "The agent's task description in simple text",
          "name": "evaluated_model_input",
          "type": "dict[any, any]"
        },
        {
          "description": "The agent's output of the task",
          "name": "evaluated_model_output",
          "type": "dict[any, any]"
        },
        {
          "description": "The agent's context",
          "name": "evaluated_model_retrieved_context",
          "type": "dict[any, any]"
        },
        {
          "description": "The agent's gold answer only if available",
          "name": "evaluated_model_gold_answer",
          "type": "dict[any, any]"
        },
        {
          "description": "List of dictionaries containing the evaluator and criteria to evaluate the model input and output. An example input for this field: [{'evaluator': '[evaluator-from-user]', 'criteria': '[criteria-from-user]'}]",
          "name": "evaluators",
          "type": "list[dict[str, str]]"
        }
      ],
      "verbose_name": "Call Patronus API tool for evaluation of model inputs and outputs"
    },
    {
      "description": "A tool to search the Qdrant database for relevant information on internal documents.",
      "env_vars": [],
      "name": "QdrantVectorSearchTool",
      "run_params": [
        {
          "description": "The query to search retrieve relevant information from the Qdrant database. Pass only the query, not the question.",
          "name": "query",
          "type": "str"
        },
        {
          "description": "Filter by properties. Pass only the properties, not the question.",
          "name": "filter_by",
          "type": "str"
        },
        {
          "description": "Filter by value. Pass only the value, not the question.",
          "name": "filter_value",
          "type": "str"
        }
      ],
      "verbose_name": "QdrantVectorSearchTool"
    },
    {
      "description": "A knowledge base that can be used to answer questions.",
      "env_vars": [],
      "name": "RagTool",
      "run_params": [],
      "verbose_name": "Knowledge base"
    },
    {
      "description": "A tool that can be used to read a website content.",
      "env_vars": [],
      "name": "ScrapeElementFromWebsiteTool",
      "run_params": [
        {
          "description": "Mandatory website url to read the file",
          "name": "website_url",
          "type": "str"
        },
        {
          "description": "Mandatory css reference for element to scrape from the website",
          "name": "css_element",
          "type": "str"
        }
      ],
      "verbose_name": "Read a website content"
    },
    {
      "description": "A tool that can be used to read a website content.",
      "env_vars": [],
      "name": "ScrapeWebsiteTool",
      "run_params": [
        {
          "description": "Mandatory website url to read the file",
          "name": "website_url",
          "type": "str"
        }
      ],
      "verbose_name": "Read website content"
    },
    {
      "description": "A tool that uses Scrapegraph AI to intelligently scrape website content.",
      "env_vars": [],
      "name": "ScrapegraphScrapeTool",
      "run_params": [
        {
          "description": "Mandatory website url to scrape",
          "name": "website_url",
          "type": "str"
        },
        {
          "description": "Extract the main content of the webpage",
          "name": "user_prompt",
          "type": "str"
        }
      ],
      "verbose_name": "Scrapegraph website scraper"
    },
    {
      "description": "Scrape a webpage url using Scrapfly and return its content as markdown or text",
      "env_vars": [],
      "name": "ScrapflyScrapeWebsiteTool",
      "run_params": [
        {
          "description": "Webpage URL",
          "name": "url",
          "type": "str"
        },
        {
          "description": "markdown",
          "name": "scrape_format",
          "type": "literal"
        },
        {
          "description": "Scrapfly request scrape config",
          "name": "scrape_config",
          "type": "dict[str, any]"
        },
        {
          "description": "whether to ignore failures",
          "name": "ignore_scrape_failures",
          "type": "bool"
        }
      ],
      "verbose_name": "Scrapfly web scraping API tool"
    },
    {
      "description": "A tool that can be used to read a website content.",
      "env_vars": [],
      "name": "SeleniumScrapingTool",
      "run_params": [
        {
          "description": "Mandatory website url to read the file. Must start with http:// or https://",
          "name": "website_url",
          "type": "str"
        },
        {
          "description": "Mandatory css reference for element to scrape from the website",
          "name": "css_element",
          "type": "str"
        }
      ],
      "verbose_name": "Read a website content"
    },
    {
      "description": "A tool to perform to perform a Google search with a search_query.",
      "env_vars": [],
      "name": "SerpApiGoogleSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to Google search.",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Location you want the search to be performed in.",
          "name": "location",
          "type": "str"
        }
      ],
      "verbose_name": "Google Search"
    },
    {
      "description": "A tool to perform search on Google shopping with a search_query.",
      "env_vars": [],
      "name": "SerpApiGoogleShoppingTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to Google shopping.",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Location you want the search to be performed in.",
          "name": "location",
          "type": "str"
        }
      ],
      "verbose_name": "Google Shopping"
    },
    {
      "description": "A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'",
      "env_vars": [
        {
          "default": null,
          "description": "API key for Serper",
          "name": "SERPER_API_KEY",
          "required": true
        }
      ],
      "name": "SerperDevTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the internet",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Search the internet with Serper"
    },
    {
      "description": "A tool to perform to perform a job search in the US with a search_query.",
      "env_vars": [],
      "name": "SerplyJobSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to fetch jobs postings.",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Job Search"
    },
    {
      "description": "A tool to perform News article search with a search_query.",
      "env_vars": [],
      "name": "SerplyNewsSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to fetch news articles",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "News Search"
    },
    {
      "description": "A tool to perform scholarly literature search with a search_query.",
      "env_vars": [],
      "name": "SerplyScholarSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to fetch scholarly literature",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Scholar Search"
    },
    {
      "description": "A tool to perform Google search with a search_query.",
      "env_vars": [],
      "name": "SerplyWebSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to Google search",
          "name": "search_query",
          "type": "str"
        }
      ],
      "verbose_name": "Google Search"
    },
    {
      "description": "A tool to perform convert a webpage to markdown to make it easier for LLMs to understand",
      "env_vars": [],
      "name": "SerplyWebpageToMarkdownTool",
      "run_params": [
        {
          "description": "Mandatory url you want to use to fetch and convert to markdown",
          "name": "url",
          "type": "str"
        }
      ],
      "verbose_name": "Webpage to Markdown"
    },
    {
      "description": "Execute SQL queries or semantic search on Snowflake data warehouse. Supports both raw SQL and natural language queries.",
      "env_vars": [],
      "name": "SnowflakeSearchTool",
      "run_params": [
        {
          "description": "SQL query or semantic search query to execute",
          "name": "query",
          "type": "str"
        },
        {
          "description": "Override default database",
          "name": "database",
          "type": "str"
        },
        {
          "description": "Override default schema",
          "name": "snowflake_schema",
          "type": "str"
        },
        {
          "description": "Query timeout in seconds",
          "name": "timeout",
          "type": "int"
        }
      ],
      "verbose_name": "Snowflake Database Search"
    },
    {
      "description": "A tool to scrape or crawl a website and return LLM-ready content.",
      "env_vars": [],
      "name": "SpiderTool",
      "run_params": [
        {
          "description": "Mandatory website URL to scrape or crawl",
          "name": "website_url",
          "type": "str"
        },
        {
          "description": "scrape",
          "name": "mode",
          "type": "literal"
        }
      ],
      "verbose_name": "SpiderTool"
    },
    {
      "description": "Use this tool to control a web browser and interact with websites using natural language.\n    \n    Capabilities:\n    - Navigate to websites and follow links\n    - Click buttons, links, and other elements\n    - Fill in forms and input fields\n    - Search within websites\n    - Extract information from web pages\n    - Identify and analyze elements on a page\n    \n    To use this tool, provide a natural language instruction describing what you want to do.\n    For different types of tasks, specify the command_type:\n    - 'act': For performing actions (default)\n    - 'navigate': For navigating to a URL (shorthand for act with navigation)\n    - 'extract': For getting data from the page\n    - 'observe': For finding and analyzing elements",
      "env_vars": [],
      "name": "StagehandTool",
      "run_params": [
        {
          "description": "Natural language instruction describing what you want to do on the website. Be specific about the action you want to perform, data to extract, or elements to observe. If your task is complex, break it down into simple, sequential steps. For example: 'Step 1: Navigate to https://example.com; Step 2: Click the login button; Step 3: Enter your credentials; Step 4: Submit the form.' Complex tasks like 'Search for OpenAI' should be broken down as: 'Step 1: Navigate to https://google.com; Step 2: Type OpenAI in the search box; Step 3: Press Enter or click the search button'.",
          "name": "instruction",
          "type": "str"
        },
        {
          "description": "The URL to navigate to before executing the instruction. MUST be used with 'navigate' command. ",
          "name": "url",
          "type": "str"
        },
        {
          "description": "act",
          "name": "command_type",
          "type": "str"
        }
      ],
      "verbose_name": "Web Automation Tool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a txt's content.",
      "env_vars": [],
      "name": "TXTSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the txt's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory txt path you want to search",
          "name": "txt",
          "type": "str"
        }
      ],
      "verbose_name": "Search a txt's content"
    },
    {
      "description": "This tool uses OpenAI's Vision API to describe the contents of an image.",
      "env_vars": [],
      "name": "VisionTool",
      "run_params": [
        {
          "description": "The image path or URL.",
          "name": "image_path_url",
          "type": "str"
        }
      ],
      "verbose_name": "Vision Tool"
    },
    {
      "description": "A tool to search the Weaviate database for relevant information on internal documents.",
      "env_vars": [],
      "name": "WeaviateVectorSearchTool",
      "run_params": [
        {
          "description": "The query to search retrieve relevant information from the Weaviate database. Pass only the query, not the question.",
          "name": "query",
          "type": "str"
        }
      ],
      "verbose_name": "WeaviateVectorSearchTool"
    },
    {
      "description": "A tool that can be used to semantic search a query from a specific URL content.",
      "env_vars": [],
      "name": "WebsiteSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search a specific website",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory valid website URL you want to search on",
          "name": "website",
          "type": "str"
        }
      ],
      "verbose_name": "Search in a specific website"
    },
    {
      "description": "A tool that can be used to semantic search a query from a XML's content.",
      "env_vars": [],
      "name": "XMLSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the XML's content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory xml path you want to search",
          "name": "xml",
          "type": "str"
        }
      ],
      "verbose_name": "Search a XML's content"
    },
    {
      "description": "A tool that can be used to semantic search a query from a Youtube Channels content.",
      "env_vars": [],
      "name": "YoutubeChannelSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the Youtube Channels content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory youtube_channel_handle path you want to search",
          "name": "youtube_channel_handle",
          "type": "str"
        }
      ],
      "verbose_name": "Search a Youtube Channels content"
    },
    {
      "description": "A tool that can be used to semantic search a query from a Youtube Video content.",
      "env_vars": [],
      "name": "YoutubeVideoSearchTool",
      "run_params": [
        {
          "description": "Mandatory search query you want to use to search the Youtube Video content",
          "name": "search_query",
          "type": "str"
        },
        {
          "description": "Mandatory youtube_video_url path you want to search",
          "name": "youtube_video_url",
          "type": "str"
        }
      ],
      "verbose_name": "Search a Youtube Video content"
    }
  ]
}